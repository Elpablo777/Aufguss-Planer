name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          # It's recommended to have flake8 in a requirements-dev.txt
          pip install flake8
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Node dependencies
        run: |
          cd frontend && npm ci
      - name: Lint Python
        run: |
          # Ensure flake8 is installed (see above)
          # Consider adding other linters/formatters like black, isort
          flake8 backend
      - name: Lint JS/TS
        run: |
          cd frontend && npm run lint # Assuming 'lint' script in package.json (e.g., eslint .)
      - name: Check TypeScript compilation
        run: |
          cd frontend && npm run typecheck # Assuming 'typecheck' script (e.g., tsc --noEmit)
      - name: Run Python tests
        env: # Ensure tests use SQLite
          USE_SQLITE_FOR_TESTS: "1"
        run: |
          cd backend && python manage.py test
      - name: Run JS/TS tests
        run: |
          cd frontend && npm test
