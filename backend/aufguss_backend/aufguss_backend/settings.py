"""
Django settings for aufguss_backend project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Load SECRET_KEY from environment variable or use a default for local development (NOT FOR PRODUCTION)
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY", "django-insecure-ot3j5pl9(skgw^2q5yin((x5w^hih8h@#za6mz-qsdv-$tvsdx"
)
# It is strongly recommended to set a unique DJANGO_SECRET_KEY in your production environment.
# The default key above is INSECURE and only for local development if DJANGO_SECRET_KEY is not set.

# SECURITY WARNING: don't run with debug turned on in production!
# Load DEBUG status from environment variable, default to False for production
DEBUG = os.environ.get("DJANGO_DEBUG", "False") == "True"

# Load ALLOWED_HOSTS from environment variable, default to localhost for development
# In production, set DJANGO_ALLOWED_HOSTS to a space-separated string of your hostnames (e.g., "yourdomain.com www.yourdomain.com")
ALLOWED_HOSTS_STRING = os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost 127.0.0.1")
ALLOWED_HOSTS = ALLOWED_HOSTS_STRING.split()
# If DEBUG is True and ALLOWED_HOSTS is empty (e.g. DJANGO_ALLOWED_HOSTS was explicitly set to empty string),
# Django defaults to ['localhost', '127.0.0.1', '[::1]']. We ensure some defaults if not in DEBUG.
if not DEBUG and not ALLOWED_HOSTS:
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"] # Default for production if not set, though it should be set.


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "channels",
    "colorfield",
    "aufguss_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "aufguss_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "aufguss_backend.wsgi.application"
ASGI_APPLICATION = "aufguss_backend.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Load database configuration from environment variables
# Fallback to default values for local development (PostgreSQL)

DB_ENGINE = os.environ.get("DB_ENGINE", "django.db.backends.postgresql")
DB_NAME_DEFAULT = "aufguss_db" if DB_ENGINE == "django.db.backends.postgresql" else str(BASE_DIR / "db.sqlite3")
DB_NAME = os.environ.get("DB_NAME", DB_NAME_DEFAULT)
DB_USER = os.environ.get("DB_USER", "postgres")
DB_PASSWORD = os.environ.get("DB_PASSWORD", "postgres")
DB_HOST = os.environ.get("DB_HOST", "localhost")
DB_PORT = os.environ.get("DB_PORT", "5432")

DATABASES = {
    "default": {
        "ENGINE": DB_ENGINE,
        "NAME": DB_NAME,
        "USER": DB_USER if DB_ENGINE == "django.db.backends.postgresql" else "",
        "PASSWORD": DB_PASSWORD if DB_ENGINE == "django.db.backends.postgresql" else "",
        "HOST": DB_HOST if DB_ENGINE == "django.db.backends.postgresql" else "",
        "PORT": DB_PORT if DB_ENGINE == "django.db.backends.postgresql" else "",
    }
}

# Override for tests: Use SQLite if specific environment variables are set
# This simplifies test setup and execution, especially in CI environments.
if os.environ.get("USE_SQLITE_FOR_TESTS") == "1" or os.environ.get("PYTEST_CURRENT_TEST"):
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "test_db.sqlite3",
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Medien für Avatare
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Channels-Konfiguration
# Für Produktion wird ein robusterer Layer wie Redis empfohlen.
# Lade REDIS_URL aus Umgebungsvariablen, wenn vorhanden und nicht im DEBUG-Modus.
REDIS_URL = os.environ.get("REDIS_URL")

if REDIS_URL and not DEBUG:
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [REDIS_URL],
            },
        },
    }
    # Hinweis: Für channels-redis v4.x wird eine einzelne URL erwartet.
    # Für ältere Versionen oder spezifischere Konfigurationen (z.B. Sentinel)
    # müsste die "CONFIG" Struktur angepasst werden.
    # Beispiel für v3.x mit Host/Port:
    # "CONFIG": {
    #     "hosts": [('localhost', 6379)], # oder aus REDIS_HOST, REDIS_PORT env vars
    # },
else:
    # Fallback auf InMemoryChannelLayer für Entwicklung oder wenn REDIS_URL nicht gesetzt ist.
    # Dies ist NICHT für Produktion geeignet, wenn mehrere Instanzen laufen.
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer",
        },
    }
    if not REDIS_URL and not DEBUG:
        print(
            "WARNUNG: REDIS_URL nicht gesetzt und DEBUG=False. "
            "Channels verwendet InMemoryChannelLayer, was nicht für Produktion geeignet ist."
        )
    elif DEBUG:
        print("Channels verwendet InMemoryChannelLayer (DEBUG=True).")


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}
